{"version":3,"file":"static/js/624.fae0db98.chunk.js","mappings":"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","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","pages/TvDetails/TvDetails.styled.js","pages/TvDetails/TvDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ButtonStyled = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #485563 0%,\n    #29323c 51%,\n    #485563 100%\n  );\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  /* box-shadow: 0 0 20px #eee; */\n  border-radius: 10px;\n  display: block;\n  cursor: pointer;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n","import { ButtonStyled } from './Button.styled';\n\nfunction Button({ children }) {\n  return <ButtonStyled type=\"button\">{children}</ButtonStyled>;\n}\n\nexport default Button;\n","import styled from '@emotion/styled';\nimport { TbMovie } from 'react-icons/tb';\n\nexport const Title = styled.h2`\n  color: #fe6d31;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  position: relative;\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    bottom: 15px;\n    height: 2px;\n    width: 100%;\n    background-image: linear-gradient(to right, #2d2b36, transparent);\n  }\n`;\nexport const MainWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  position: relative;\n  flex-direction: column;\n\n  @media screen and (min-width: 860px) {\n    flex-direction: row;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    bottom: -20px;\n    height: 2px;\n    width: 100%;\n    background-image: linear-gradient(to right, #2d2b36, transparent);\n  }\n`;\n\nexport const MovieDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n  border-radius: 20px;\n  box-shadow: 0px 2px 8px 0px black;\n`;\n\nexport const Overview = styled.p`\n  max-width: 600px;\n`;\nexport const Span = styled.span`\n  color: var(--second-color);\n`;\n\nexport const LinksWrap = styled.ul`\n  display: flex;\n  gap: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const ImageWrapper = styled.div`\n  min-width: 300px;\n  min-height: 450px;\n`;\n\nexport const Poster = styled.img``;\n\nexport const NoPoster = styled(TbMovie)`\n  width: 100%;\n  height: 100%;\n  stroke: white;\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams, Link } from 'react-router-dom';\nimport {\n  Title,\n  MainWrapper,\n  MovieDetailsWrapper,\n  LinksWrap,\n  Overview,\n  Span,\n  ImageWrapper,\n  Poster,\n  NoPoster,\n} from './TvDetails.styled';\nimport Button from 'components/Button/Button';\nimport { getTvDetails } from 'services/tvDetailsAPI';\nimport { useLocation } from 'react-router-dom';\nimport { useRef } from 'react';\nimport SectionTemplate from 'components/SectionTemplate/SectionTemplate';\nimport Loader from 'components/Loader/Loader';\nimport { motion } from 'framer-motion';\n\nfunction TvDetails() {\n  const [tv, setTv] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    getTvDetails(movieId)\n      .then(res => {\n        setTv(res);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {});\n  }, [movieId]);\n\n  if (!tv) {\n    return;\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <SectionTemplate>\n        <Link to={backLinkHref.current}>\n          <Button>Go Back</Button>\n        </Link>\n        <Title>{tv?.name}</Title>\n        <MainWrapper>\n          {/* <div>\n            <img\n              src={`http://image.tmdb.org/t/p/w300${tv['poster_path']}`}\n              alt={tv?.name}\n            />\n          </div> */}\n          <ImageWrapper>\n            {tv['poster_path'] ? (\n              <Poster\n                src={`http://image.tmdb.org/t/p/w300${tv['poster_path']}`}\n                alt={tv?.title}\n              />\n            ) : (\n              <NoPoster />\n            )}\n          </ImageWrapper>\n          <MovieDetailsWrapper>\n            <p>\n              <Span>Rating:</Span> {tv['vote_average']}\n            </p>\n            <p>\n              <Span>First air date:</Span> {tv['first_air_date']}\n            </p>\n            <p>\n              <Span>Last air date:</Span> {tv['last_air_date']}\n            </p>\n            <p>\n              <Span>Number of seasons:</Span> {tv?.number_of_seasons}\n            </p>\n            <p>\n              <Span>Number of episodes:</Span> {tv?.number_of_episodes}\n            </p>\n            <p>\n              <Span>Country:</Span> {tv['origin_country'][0]}\n            </p>\n\n            {tv['genres'] && tv['genres'].length > 0 ? (\n              <p>\n                <Span>Genres:</Span>{' '}\n                {tv['genres'].map(genre => genre.name).join(', ')}\n              </p>\n            ) : null}\n\n            <Overview>{tv?.overview}</Overview>\n          </MovieDetailsWrapper>\n        </MainWrapper>\n      </SectionTemplate>\n      <SectionTemplate>\n        <LinksWrap>\n          <li>\n            <Link to=\"cast\">\n              <Button>Cast</Button>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">\n              <Button>Reviews</Button>\n            </Link>\n          </li>\n        </LinksWrap>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </SectionTemplate>\n    </motion.div>\n  );\n}\nexport default TvDetails;\n"],"names":["ButtonStyled","styled","_templateObject","_taggedTemplateLiteral","_ref","children","_jsx","type","Title","MainWrapper","_templateObject2","MovieDetailsWrapper","_templateObject3","Overview","_templateObject4","Span","_templateObject5","LinksWrap","_templateObject6","ImageWrapper","_templateObject7","Poster","_templateObject8","NoPoster","TbMovie","_templateObject9","_location$state$from","_location$state","_useState","useState","_useState2","_slicedToArray","tv","setTv","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","getTvDetails","then","res","catch","err","console","log","finally","_jsxs","motion","initial","opacity","animate","exit","SectionTemplate","Link","to","current","Button","name","src","concat","alt","title","number_of_seasons","number_of_episodes","length","map","genre","join","overview","Suspense","fallback","Loader","Outlet"],"sourceRoot":""}