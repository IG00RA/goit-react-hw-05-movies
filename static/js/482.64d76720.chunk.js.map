{"version":3,"file":"static/js/482.64d76720.chunk.js","mappings":"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","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","components/SearchTvShow/SearchTvShow.styled.js","components/TvShows/GenrePanel/GenrePanel.styled.js","components/TvShows/GenrePanel/GenrePanel.jsx","pages/TvGenres/TvGenres.jsx","services/tvAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ButtonStyled = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #485563 0%,\n    #29323c 51%,\n    #485563 100%\n  );\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  /* box-shadow: 0 0 20px #eee; */\n  border-radius: 10px;\n  display: block;\n  cursor: pointer;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n","import { ButtonStyled } from './Button.styled';\n\nfunction Button({ children }) {\n  return <ButtonStyled type=\"button\">{children}</ButtonStyled>;\n}\n\nexport default Button;\n","import styled from '@emotion/styled';\nimport { BiSearchAlt } from 'react-icons/bi';\n\nexport const Form = styled.form`\n  display: flex;\n  height: 40px;\n  padding-bottom: 20px;\n`;\n\nexport const Label = styled.label``;\n\nexport const Input = styled.input`\n  width: 300px;\n  font-size: 18px;\n  color: white;\n  background-color: #2d2b36;\n  border: none;\n  padding: 10px;\n  border-radius: 6px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  outline: none;\n  &::placeholder {\n    color: rgba(100, 100, 100, 1);\n  }\n`;\n\nexport const ButtonSearch = styled.button`\n  background-color: #fe6d31;\n  border: none;\n  cursor: pointer;\n  position: relative;\n  height: 100%;\n  padding: 0;\n  display: inline-block;\n  padding-top: 5px;\n  padding-right: 5px;\n  padding-left: 5px;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  transition: background-color 0.3s ease;\n  &:hover {\n    background-color: orangered;\n  }\n`;\n\nexport const Icon = styled(BiSearchAlt)`\n  fill: white;\n  padding: 0;\n  width: 90%;\n  height: 90%;\n`;\n\nexport const BtnLoadMore = styled.button`\n  position: relative;\n  background-image: linear-gradient(\n    to right,\n    #485563 0%,\n    #29323c 51%,\n    #485563 100%\n  );\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  border-radius: 10px;\n  display: block;\n  min-width: 166px;\n  height: 50px;\n  cursor: pointer;\n  margin: 0 auto;\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const GenreList = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  padding: 10px;\n  justify-content: center;\n  box-shadow: 0px 5px 5px 0px rgba(0, 0, 0, 0.2);\n`;\n\nexport const GenreName = styled(Link)`\n  font-size: 12px;\n  color: #8f938f;\n`;\n","import { useState, useEffect } from 'react';\nimport { getTvGenres } from 'services/tvAPI';\nimport { GenreList, GenreName } from './GenrePanel.styled';\nimport { toast } from 'react-toastify';\nimport { useLocation } from 'react-router-dom';\n\nfunction GenrePanel() {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [array, setArray] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTvGenres()\n      .then(({ genres }) => {\n        setArray(genres);\n      })\n      .catch(err => {\n        setError(true);\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (error) {\n    toast.error('Sorry for the inconvenience! Try again later.', {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'colored',\n    });\n  }\n\n  if (loading) {\n    return (\n      <>\n        <p>Loading...</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <GenreList>\n        {array.map(({ id, name }) => {\n          const randomDate = new Date(\n            +new Date() - Math.floor(Math.random() * 10000000000)\n          );\n          return (\n            <GenreName\n              key={id * randomDate.getTime()}\n              to={`/tv/genres/${id}`}\n              state={{ from: location }}\n            >\n              {name}\n            </GenreName>\n          );\n        })}\n      </GenreList>\n    </>\n  );\n}\nexport default GenrePanel;\n","import { useState, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\n// import {} from './MovieGenres.styled';\nimport { getTvByGenre } from 'services/tvAPI';\nimport Button from 'components/Button/Button';\nimport { useLocation } from 'react-router-dom';\nimport { useRef } from 'react';\nimport SectionTemplate from 'components/SectionTemplate/SectionTemplate';\nimport TitleTemplate from 'components/TitleTemplate/TitleTemplate';\nimport ListTemplate from 'components/ListTemplate/ListTemplate';\nimport Card from 'components/Card/Card';\nimport { BtnLoadMore } from 'components/SearchTvShow/SearchTvShow.styled';\nimport { ThreeDots } from 'react-loader-spinner';\nimport GenrePanel from 'components/TvShows/GenrePanel/GenrePanel';\nimport { getTvGenres } from 'services/tvAPI';\nimport { toast } from 'react-toastify';\nimport { motion } from 'framer-motion';\n// import Loader from 'components/Loader/Loader';\n\nfunction TvGenres() {\n  const [error, setError] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [page, setPage] = useState(1);\n  const [prevGenre, setPrevGenre] = useState('');\n  const [array, setArray] = useState([]);\n  const [title, setTitle] = useState('');\n  const { genre } = useParams();\n  const [loaderLoadMore, setLoaderLoadMore] = useState(false);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  if (genre !== prevGenre) {\n    setPage(1);\n    setMovie(null);\n    setPrevGenre(genre);\n  }\n\n  useEffect(() => {\n    if (array.length > 0) {\n      const selectedGenre = array.find(ob => ob.id === parseInt(genre));\n      if (selectedGenre) {\n        setTitle(selectedGenre.name);\n      }\n    }\n  }, [array, genre]);\n\n  useEffect(() => {\n    getTvGenres()\n      .then(({ genres }) => {\n        setArray(genres);\n      })\n      .catch(err => {\n        setError(true);\n        console.log(err);\n      })\n      .finally(() => {});\n  }, []);\n\n  useEffect(() => {\n    getTvByGenre(genre, page)\n      .then(({ results }) => {\n        if (page === 1) {\n          setMovie(results);\n        } else {\n          setMovie(prevMovies => [...prevMovies, ...results]);\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {\n        setLoaderLoadMore(false);\n      });\n  }, [genre, page]);\n\n  const handleLoadMore = () => {\n    setLoaderLoadMore(true);\n    setPage(prevPage => prevPage + 1);\n  };\n\n  if (!movie) {\n    return;\n  }\n\n  if (error) {\n    toast.error('Sorry for the inconvenience! Try again later.', {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'colored',\n    });\n  }\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <GenrePanel />\n      <SectionTemplate>\n        <Link to={backLinkHref.current}>\n          <Button>Go Back</Button>\n        </Link>\n      </SectionTemplate>\n      <SectionTemplate>\n        <TitleTemplate>{title}</TitleTemplate>\n        <ListTemplate>\n          {movie.map((movie, index) => (\n            <Card\n              key={movie.id - index}\n              movieId={movie.id}\n              title={movie.title || movie.name}\n              poster={movie['poster_path']}\n              type={'tv'}\n              rating={movie['vote_average']}\n              date={movie['release_date']}\n            />\n          ))}\n        </ListTemplate>\n        {!loaderLoadMore ? (\n          <BtnLoadMore onClick={handleLoadMore}>Load more</BtnLoadMore>\n        ) : (\n          <BtnLoadMore>\n            <ThreeDots\n              height=\"50\"\n              width=\"50\"\n              radius=\"9\"\n              color=\"#fe6d31\"\n              ariaLabel=\"three-dots-loading\"\n              wrapperStyle={{\n                justifyContent: 'center',\n                position: 'absolute',\n                top: '0',\n                left: '50%',\n                transform: 'translateX(-50%)',\n              }}\n              wrapperClassName=\"\"\n              visible={true}\n            />\n          </BtnLoadMore>\n        )}\n      </SectionTemplate>\n    </motion.div>\n  );\n}\nexport default TvGenres;\n","import axios from 'axios';\n\nconst API_KEY = 'c7dd7652c2a2bbf7bac5e128508653f3';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\naxios.defaults.baseURL = API_BASE_URL;\n\n// TV Shows        https://api.themoviedb.org/3   /trending/tv/day      ?language=en-US\n// Search by name: https://api.themoviedb.org/3   /search/tv            ?query=iron&include_adult=false&language=en-US&page=1\n// Genres          https://api.themoviedb.org/3   /genre/tv/list\n// Top Rated       https://api.themoviedb.org/3   /tv/top_rated\n// Tv by genre     https://api.themoviedb.org/3   /discover/tv          ?include_adult=false&include_null_first_air_dates=false&language=en-US&page=1&sort_by=popularity.desc\n\nconst TV_API = {\n  trending: '/trending/tv/day',\n  tvSearch: '/search/tv',\n  genres: '/genre/tv/list',\n  topRated: '/tv/top_rated',\n  tvByGenre: '/discover/tv',\n};\n\nexport const getTvTrendingList = async () => {\n  try {\n    const result = await axios.get(TV_API.trending, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvGenres = async () => {\n  try {\n    const result = await axios.get(TV_API.genres, {\n      params: { api_key: API_KEY },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvTopRated = async () => {\n  try {\n    const result = await axios.get(TV_API.topRated, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvSearch = async (query, page) => {\n  try {\n    const result = await axios.get(TV_API.tvSearch, {\n      params: { query, api_key: API_KEY, language: 'en-US', page },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvByGenre = async (genre, page) => {\n  try {\n    const result = await axios.get(TV_API.tvByGenre, {\n      params: {\n        include_null_first_air_dates: false,\n        include_adult: false,\n        api_key: API_KEY,\n        include_video: false,\n        language: 'en-US',\n        page,\n        sort_by: 'popularity.desc',\n        with_genres: genre,\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n"],"names":["ButtonStyled","styled","_templateObject","_taggedTemplateLiteral","_ref","children","_jsx","type","Form","Label","_templateObject2","Input","_templateObject3","ButtonSearch","_templateObject4","Icon","BiSearchAlt","_templateObject5","BtnLoadMore","_templateObject6","GenreList","GenreName","Link","_useState","useState","_useState2","_slicedToArray","error","setError","_useState3","_useState4","loading","setLoading","_useState5","_useState6","array","setArray","location","useLocation","useEffect","getTvGenres","then","genres","catch","err","console","log","finally","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","_Fragment","map","_ref2","id","name","randomDate","Date","Math","floor","random","to","concat","state","from","getTime","_location$state$from","_location$state","movie","setMovie","page","setPage","_useState7","_useState8","prevGenre","setPrevGenre","_useState9","_useState10","_useState11","_useState12","title","setTitle","genre","useParams","_useState13","_useState14","loaderLoadMore","setLoaderLoadMore","backLinkHref","useRef","length","selectedGenre","find","ob","parseInt","getTvByGenre","results","prevMovies","_toConsumableArray","_jsxs","motion","initial","opacity","animate","exit","GenrePanel","SectionTemplate","current","Button","TitleTemplate","ListTemplate","index","Card","movieId","poster","rating","date","ThreeDots","height","width","radius","color","ariaLabel","wrapperStyle","justifyContent","top","left","transform","wrapperClassName","visible","onClick","prevPage","API_KEY","axios","TV_API","getTvTrendingList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","params","api_key","language","sent","abrupt","data","t0","Error","response","message","stop","apply","arguments","_callee2","_context2","getTvTopRated","_ref3","_callee3","_context3","getTvSearch","_ref4","_callee4","query","_context4","_x","_x2","_ref5","_callee5","_context5","include_null_first_air_dates","include_adult","include_video","sort_by","with_genres","_x3","_x4"],"sourceRoot":""}